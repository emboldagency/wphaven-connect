<?php

namespace WPHavenConnect\Providers;

use WPHavenConnect\Utilities\Environment;

/**
 * Automatically creates an MU plugin to suppress _load_textdomain_just_in_time notices
 * when the environment is development or the WPH_SUPPRESS_TEXTDOMAIN_NOTICES constant is set to true
 */
class TextdomainNoticeSuppressionProvider
{
    private $mu_plugin_path;
    private $mu_plugin_content;

    public function __construct()
    {
        $this->mu_plugin_path = WPMU_PLUGIN_DIR . '/suppress-textdomain-notices.php';
    }

    public function register()
    {
        // Check if we should suppress textdomain notices
        $should_suppress = $this->shouldSuppressNotices();

        if ($should_suppress) {
            $this->ensureMuPluginExists();
        } else {
            $this->removeMuPluginIfExists();
        }

        // Log helpful message for development environments
        if (Environment::is_development() && !$should_suppress) {
            error_log('[WPHavenConnect] To suppress _load_textdomain_just_in_time notices in development, add this to wp-config.php: define(\'WPH_SUPPRESS_TEXTDOMAIN_NOTICES\', true);');
        }
    }

    /**
     * Check if textdomain notices should be suppressed
     */
    private function shouldSuppressNotices(): bool
    {
        // Explicit constant takes precedence
        if (defined('WPH_SUPPRESS_TEXTDOMAIN_NOTICES')) {
            return (bool) WPH_SUPPRESS_TEXTDOMAIN_NOTICES;
        }

        // Default to true in development environments
        return Environment::is_development();
    }

    /**
     * Ensure the MU plugin exists and is up to date
     */
    private function ensureMuPluginExists(): void
    {
        // Create mu-plugins directory if it doesn't exist
        if (!is_dir(WPMU_PLUGIN_DIR)) {
            if (!wp_mkdir_p(WPMU_PLUGIN_DIR)) {
                error_log('[WPHavenConnect] Failed to create mu-plugins directory: ' . WPMU_PLUGIN_DIR);
                return;
            }
        }

        // Check if file exists and is current
        if (file_exists($this->mu_plugin_path)) {
            $current_content = $this->getMuPluginContent();
            $existing_content = file_get_contents($this->mu_plugin_path);
            if ($existing_content === $current_content) {
                // File is already up to date
                return;
            }
        }

        // Create or update the MU plugin
        $content = $this->getMuPluginContent();
        if ($content === false) {
            error_log('[WPHavenConnect] Failed to read MU plugin template');
            return;
        }

        if (file_put_contents($this->mu_plugin_path, $content) === false) {
            error_log('[WPHavenConnect] Failed to create textdomain suppression MU plugin: ' . $this->mu_plugin_path);
        } else {
            error_log('[WPHavenConnect] Created/updated textdomain suppression MU plugin: ' . $this->mu_plugin_path);
        }
    }

    /**
     * Remove the MU plugin if it exists and suppression is disabled
     */
    private function removeMuPluginIfExists(): void
    {
        if (file_exists($this->mu_plugin_path)) {
            // Check if this is our generated file by looking for our signature
            $existing_content = file_get_contents($this->mu_plugin_path);
            if (strpos($existing_content, '* Auto-generated by WPHaven Connect') !== false) {
                if (unlink($this->mu_plugin_path)) {
                    error_log('[WPHavenConnect] Removed textdomain suppression MU plugin: ' . $this->mu_plugin_path);
                } else {
                    error_log('[WPHavenConnect] Failed to remove textdomain suppression MU plugin: ' . $this->mu_plugin_path);
                }
            }
        }
    }

    /**
     * Get the content for the MU plugin from template file
     */
    private function getMuPluginContent()
    {
        $template_path = __DIR__ . '/../templates/suppress-textdomain-notices.php';

        if (!file_exists($template_path)) {
            error_log('[WPHavenConnect] MU plugin template not found: ' . $template_path);
            return false;
        }

        return file_get_contents($template_path);
    }
}
